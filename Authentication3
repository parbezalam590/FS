const express = require('express');
const jwt = require('jsonwebtoken');
const app = express();

app.use(express.json());

// Secret key for JWT
const SECRET_KEY = "mysecretkey";

// Sample users
const users = [
  { id: 1, username: "adminUser", password: "admin123", role: "Admin" },
  { id: 2, username: "modUser", password: "mod123", role: "Moderator" },
  { id: 3, username: "normalUser", password: "user123", role: "User" }
];

// --- LOGIN ROUTE ---
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  
  if (!user) return res.status(401).json({ message: "Invalid credentials" });

  // Create token with role
  const token = jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    SECRET_KEY,
    { expiresIn: '1h' }
  );

  res.json({ token });
});

// --- JWT VERIFY MIDDLEWARE ---
function verifyToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: "Token missing" });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = user;
    next();
  });
}

// --- ROLE CHECK MIDDLEWARE ---
function checkRole(...roles) {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "Access denied: insufficient role" });
    }
    next();
  };
}

// --- PROTECTED ROUTES ---
app.get('/admin-dashboard', verifyToken, checkRole('Admin'), (req, res) => {
  res.json({
    message: "Welcome to the Admin dashboard",
    user: req.user
  });
});

app.get('/moderator-panel', verifyToken, checkRole('Moderator'), (req, res) => {
  res.json({
    message: "Welcome to the Moderator panel",
    user: req.user
  });
});

app.get('/user-profile', verifyToken, (req, res) => {
  res.json({
    message: `Welcome to your profile, ${req.user.username}!`,
    user: req.user
  });
});

// Start server
app.listen(3000, () => console.log("Server is running on port 3000"));
